"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ava_1 = require("ava");
const denali_1 = require("denali");
const lodash_1 = require("lodash");
ava_1.default.beforeEach((t) => {
    t.context.container = new denali_1.Container(__dirname);
});
// Ensure a given finder method invokes it's corresponding adapter method
function finderInvokesAdapter(t, finder, adapterReturn, ...args) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        t.plan(1);
        let container = t.context.container;
        container.register('service:db', denali_1.DatabaseService);
        container.register('model:post', class Post extends denali_1.Model {
        });
        container.register('orm-adapter:post', {
            buildRecord() { return {}; },
            [finder]() {
                t.pass();
                return adapterReturn;
            },
            getAttribute() { return null; }
        }, { instantiate: false, singleton: true });
        let db = container.lookup('service:db');
        yield db[finder]('post', ...args);
    });
}
finderInvokesAdapter.title = (providedTitle, finder) => `db.${finder} invokes the ${finder} method on the adapter`;
// Check the results of a finder method call, and stub out the corresponding adapter method
function finderReturns(t, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        t.plan(1);
        let container = t.context.container;
        container.register('service:db', denali_1.DatabaseService);
        container.register('model:post', class Post extends denali_1.Model {
        });
        container.register('orm-adapter:post', {
            buildRecord() { return {}; },
            [options.finder]: options.adapterMethod,
            getAttribute() { return null; }
        }, { instantiate: false, singleton: true });
        let db = container.lookup('service:db');
        let result = yield db[options.finder]('post', options.arg);
        options.assert(t, result);
    });
}
ava_1.default(finderInvokesAdapter, 'find', {}, 1);
ava_1.default(finderInvokesAdapter, 'queryOne', {}, { foo: true });
ava_1.default(finderInvokesAdapter, 'all', []);
ava_1.default(finderInvokesAdapter, 'query', [], { foo: true });
ava_1.default('find returns model instance', finderReturns, {
    finder: 'find',
    arg: 1,
    adapterMethod() { return {}; },
    assert(t, result) {
        t.true(result instanceof denali_1.Model);
    }
});
ava_1.default('find returns null if adapter does', finderReturns, {
    finder: 'find',
    arg: 1,
    adapterMethod() { return null; },
    assert(t, result) {
        t.is(result, null);
    }
});
ava_1.default('queryOne returns model instance', finderReturns, {
    finder: 'queryOne',
    arg: { foo: true },
    adapterMethod() { return {}; },
    assert(t, result) {
        t.true(result instanceof denali_1.Model);
    }
});
ava_1.default('queryOne returns null if adapter does', finderReturns, {
    finder: 'queryOne',
    arg: { foo: true },
    adapterMethod() { return null; },
    assert(t, result) {
        t.is(result, null);
    }
});
ava_1.default('all returns an array', finderReturns, {
    finder: 'all',
    arg: undefined,
    adapterMethod() { return []; },
    assert(t, result) {
        t.true(lodash_1.isArray(result));
    }
});
ava_1.default('query returns an array', finderReturns, {
    finder: 'query',
    arg: { foo: true },
    adapterMethod() { return []; },
    assert(t, result) {
        t.true(lodash_1.isArray(result));
    }
});
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* tslint:disable:completed-docs no-empty no-invalid-this member-access */
const ava_1 = require("ava");
const denali_1 = require("denali");
const path = require("path");
const dummyAppPath = path.join(__dirname, '..', 'dummy');
ava_1.default('metaFor returns a container-scoped metadata object', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let container = new denali_1.Container(dummyAppPath);
    let key = {};
    let meta = container.metaFor(key);
    meta.foo = true;
    t.is(container.metaFor(key), meta);
    let otherContainer = new denali_1.Container(dummyAppPath);
    t.not(otherContainer.metaFor(key), meta);
}));
ava_1.default('get/setOption allows options per type', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let container = new denali_1.Container(dummyAppPath);
    container.setOption('type', 'singleton', true);
    t.true(container.getOption('type', 'singleton'));
    t.true(container.getOption('type:entry', 'singleton'));
}));
ava_1.default('get/setOption allows options per specifier', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let container = new denali_1.Container(dummyAppPath);
    container.setOption('type:entry', 'singleton', true);
    t.true(container.getOption('type:entry', 'singleton'));
}));
ava_1.default('instantiate: true, singleton: true', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let container = new denali_1.Container(dummyAppPath);
    container.setOption('foo', 'singleton', true);
    container.setOption('foo', 'instantiate', true);
    class Foo {
    }
    container.register('foo:main', Foo);
    let result = container.lookup('foo:main');
    t.true(result instanceof Foo);
    t.is(result, container.lookup('foo:main'));
}));
ava_1.default('instantiate: false, singleton: true', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let container = new denali_1.Container(dummyAppPath);
    container.setOption('foo', 'singleton', true);
    container.setOption('foo', 'instantiate', false);
    let foo = {};
    container.register('foo:main', foo);
    let result = container.lookup('foo:main');
    t.is(result, foo);
    t.is(result, container.lookup('foo:main'));
}));
ava_1.default('instantiate: true, singleton: false', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let container = new denali_1.Container(dummyAppPath);
    container.setOption('foo', 'singleton', false);
    container.setOption('foo', 'instantiate', true);
    class Foo {
    }
    container.register('foo:main', Foo);
    let result = container.lookup('foo:main');
    t.true(result instanceof Foo);
    t.not(result, container.lookup('foo:main'));
}));
ava_1.default('should default unknown types to instantiate: false, singleton: true', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let container = new denali_1.Container(dummyAppPath);
    container.register('foo:main', { foo: true });
    let result = container.lookup('foo:main');
    t.true(result.foo);
}));
ava_1.default('register(type, value) registers a value on the container', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let container = new denali_1.Container(dummyAppPath);
    container.register('foo:bar', { buzz: true }, { singleton: true, instantiate: false });
    t.true(container.lookup('foo:bar').buzz);
}));
ava_1.default('lookup(type) looks up a module', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let container = new denali_1.Container(dummyAppPath);
    container.register('foo:bar', { buzz: true }, { singleton: true, instantiate: false });
    t.true(container.lookup('foo:bar').buzz);
}));
ava_1.default('lookupAll(type) returns an object with all the modules of the given type', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let container = new denali_1.Container(dummyAppPath);
    container.register('foo:bar', { isBar: true }, { singleton: true, instantiate: false });
    container.register('foo:buzz', { isBuzz: true }, { singleton: true, instantiate: false });
    let type = container.lookupAll('foo');
    t.truthy(type.bar);
    t.true(type.bar.isBar);
    t.truthy(type.buzz);
    t.true(type.buzz.isBuzz);
}));
ava_1.default('lazily instantiates singletons (i.e. on lookup)', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let container = new denali_1.Container(dummyAppPath);
    function Class() {
        t.fail('Class should not have been instantiated.');
    }
    container.register('foo:bar', Class, { singleton: true });
    t.pass();
}));
ava_1.default('availableForType() returns all registered instances of a type', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let container = new denali_1.Container(dummyAppPath);
    container.register('foo:a', { a: true }, { singleton: true, instantiate: false });
    container.register('foo:b', { b: true }, { singleton: true, instantiate: false });
    container.register('foo:c', { c: true }, { singleton: true, instantiate: false });
    container.register('foo:d', { d: true }, { singleton: true, instantiate: false });
    t.deepEqual(container.availableForType('foo'), ['a', 'b', 'c', 'd']);
}));
ava_1.default('properties marked as injections are injected', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let container = new denali_1.Container(dummyAppPath);
    container.register('bar:main', { isPresent: true }, { singleton: true, instantiate: false });
    container.register('foo:main', { bar: denali_1.inject('bar:main') }, { singleton: true, instantiate: false });
    let foo = container.lookup('foo:main');
    t.true(foo.bar.isPresent, 'injection was applied');
}));
ava_1.default('tears down singletons', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    t.plan(1);
    let container = new denali_1.Container(dummyAppPath);
    container.register('foo:main', {
        teardown() {
            t.pass();
        }
    }, { singleton: false, instantiate: false });
    container.lookup('foo:main');
    container.teardown();
}));
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* tslint:disable:completed-docs no-empty no-invalid-this member-access */
const ava_1 = require("ava");
const denali_1 = require("denali");
function buildAndSave(adapter, type, data) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let record = adapter.buildRecord(type, data);
        let model = {
            type,
            record,
            get id() {
                return this.record.id;
            }
        };
        yield adapter.saveRecord(model);
        return model;
    });
}
ava_1.default.beforeEach((t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    t.context.container = new denali_1.Container(__dirname);
    t.context.adapter = new denali_1.MemoryAdapter();
}));
ava_1.default('find returns record with given id', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let adapter = t.context.adapter;
    let model = yield buildAndSave(adapter, 'foo', { bar: true });
    let result = yield adapter.find('foo', model.record.id);
    t.deepEqual(result, model.record);
}));
ava_1.default('find returns null for non-existent id', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let adapter = t.context.adapter;
    t.is(yield adapter.find('whatever', 0), null);
}));
ava_1.default('queryOne returns the first record that matches the given query', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let adapter = t.context.adapter;
    let type = 'foo';
    let matching = yield buildAndSave(adapter, type, { number: 'one', bar: true });
    yield buildAndSave(adapter, type, { number: 'two', bar: true });
    yield buildAndSave(adapter, type, { number: 'three', bar: false });
    let result = yield adapter.queryOne(type, { bar: true });
    t.deepEqual(result, matching.record);
}));
ava_1.default('queryOne returns null if query does not match anything', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let adapter = t.context.adapter;
    t.is(yield adapter.queryOne('whatever', { whatever: true }), null);
}));
ava_1.default('all returns all records', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let adapter = t.context.adapter;
    let type = 'foo';
    let modelOne = yield buildAndSave(adapter, type, { number: 'one' });
    let modelTwo = yield buildAndSave(adapter, type, { number: 'two' });
    let result = yield adapter.all(type);
    t.deepEqual(result, [modelOne.record, modelTwo.record]);
}));
ava_1.default('query returns all records that match a given query', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let adapter = t.context.adapter;
    let type = 'foo';
    let matchingOne = yield buildAndSave(adapter, type, { number: 'one', bar: true });
    let matchingTwo = yield buildAndSave(adapter, type, { number: 'two', bar: true });
    yield buildAndSave(adapter, type, { number: 'three', bar: false });
    let result = yield adapter.query(type, { bar: true });
    t.deepEqual(result, [matchingOne.record, matchingTwo.record]);
}));
ava_1.default('get and set attributes', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let adapter = t.context.adapter;
    let record = adapter.buildRecord('foo', { bar: true });
    let model = { record };
    adapter.setAttribute(model, 'bar', false);
    adapter.setAttribute(model, 'fizz', 'buzz');
    t.is(adapter.getAttribute(model, 'bar'), false);
    t.is(adapter.getAttribute(model, 'fizz'), 'buzz');
}));
ava_1.default('getRelated returns related records', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let adapter = t.context.adapter;
    let post = yield buildAndSave(adapter, 'post', {});
    let comment = yield buildAndSave(adapter, 'comment', { text: 'great post!' });
    let descriptor = denali_1.hasMany('comment');
    adapter.setRelated(post, 'comments', descriptor, [comment]);
    let result = yield adapter.getRelated(post, 'comments', descriptor, null);
    t.deepEqual(result, [comment.record]);
}));
ava_1.default('setRelated replaces related records', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let adapter = t.context.adapter;
    let post = yield buildAndSave(adapter, 'post', {});
    let comment = yield buildAndSave(adapter, 'comment', { text: 'great post!' });
    let descriptor = denali_1.hasMany('comment');
    adapter.setRelated(post, 'comments', descriptor, [comment]);
    let sanityCheck = yield adapter.getRelated(post, 'comments', descriptor, null);
    t.deepEqual(sanityCheck, [comment.record]);
    let newComment = yield buildAndSave(adapter, 'comment', { text: 'even greater post!' });
    adapter.setRelated(post, 'comments', descriptor, [newComment]);
    let result = yield adapter.getRelated(post, 'comments', descriptor, null);
    t.deepEqual(result, [newComment.record]);
}));
ava_1.default('addRelated adds a related record to a has many relationship', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let adapter = t.context.adapter;
    let post = yield buildAndSave(adapter, 'post', {});
    let comment = yield buildAndSave(adapter, 'comment', { text: 'great post!' });
    let descriptor = denali_1.hasMany('comment');
    adapter.setRelated(post, 'comments', descriptor, [comment]);
    let sanityCheck = yield adapter.getRelated(post, 'comments', descriptor, null);
    t.deepEqual(sanityCheck, [comment.record]);
    let newComment = yield buildAndSave(adapter, 'comment', { text: 'even greater post!' });
    adapter.addRelated(post, 'comments', descriptor, newComment);
    let result = yield adapter.getRelated(post, 'comments', descriptor, null);
    t.deepEqual(result, [comment.record, newComment.record]);
}));
ava_1.default('removeRelated destroys a relationship between related records', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let adapter = t.context.adapter;
    let post = yield buildAndSave(adapter, 'post', {});
    let comment = yield buildAndSave(adapter, 'comment', { text: 'great post!' });
    let descriptor = denali_1.hasMany('comment');
    adapter.setRelated(post, 'comments', descriptor, [comment]);
    let sanityCheck = yield adapter.getRelated(post, 'comments', descriptor, null);
    t.deepEqual(sanityCheck, [comment.record]);
    adapter.removeRelated(post, 'comments', descriptor, comment);
    let result = yield adapter.getRelated(post, 'comments', descriptor, null);
    t.deepEqual(result, []);
}));
//# sourceMappingURL=data:application/json;base64,
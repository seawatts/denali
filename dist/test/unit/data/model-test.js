"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* tslint:disable:completed-docs no-empty no-invalid-this member-access */
const lodash_1 = require("lodash");
const ava_1 = require("ava");
const denali_1 = require("denali");
ava_1.default.beforeEach((t) => {
    t.context.container = new denali_1.Container(__dirname);
});
ava_1.default('type returns the container name of the model', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let container = t.context.container;
    container.register('orm-adapter:application', denali_1.MemoryAdapter);
    container.register('model:foo/bar/buzz', class Post extends denali_1.Model {
    });
    let post = container.factoryFor('model:foo/bar/buzz').create();
    t.is(post.type, 'foo/bar/buzz');
}));
ava_1.default('adapter uses model-specific one if found', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    t.plan(1);
    let container = t.context.container;
    container.register('model:post', class Post extends denali_1.Model {
    });
    class ApplicationAdapter extends denali_1.MemoryAdapter {
    }
    container.register('orm-adapter:application', ApplicationAdapter);
    class PostAdapter extends denali_1.MemoryAdapter {
    }
    container.register('orm-adapter:post', PostAdapter);
    let post = container.factoryFor('model:post').create();
    t.true(post.adapter instanceof PostAdapter);
}));
ava_1.default('adapter falls back to application if model specific not found', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    t.plan(1);
    let container = t.context.container;
    container.register('model:post', class Post extends denali_1.Model {
    });
    class ApplicationAdapter extends denali_1.MemoryAdapter {
    }
    container.register('orm-adapter:application', ApplicationAdapter);
    let post = container.factoryFor('model:post').create();
    t.true(post.adapter instanceof ApplicationAdapter);
}));
ava_1.default('get<RelationshipName> invokes adapter', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    t.plan(1);
    let container = t.context.container;
    container.register('model:post', (_a = class Post extends denali_1.Model {
        },
        _a.comments = denali_1.hasMany('comment'),
        _a));
    container.register('model:comment', class Comment extends denali_1.Model {
    });
    container.register('orm-adapter:application', class extends denali_1.MemoryAdapter {
        getRelated(model, relationship, descriptor, query) {
            t.pass();
            return super.getRelated(model, relationship, descriptor, query);
        }
    });
    let Post = container.factoryFor('model:post');
    let post = yield Post.create().save();
    yield post.getComments();
    var _a;
}));
ava_1.default('get<RelationshipName> throws for non-existent relationships', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    t.plan(1);
    let container = t.context.container;
    container.register('model:post', class Post extends denali_1.Model {
    });
    container.register('orm-adapter:application', class extends denali_1.MemoryAdapter {
    });
    let Post = container.factoryFor('model:post');
    let post = yield Post.create().save();
    t.throws(function () {
        post.getComments();
    });
}));
ava_1.default('get<RelationshipName> returns related model instances', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let container = t.context.container;
    container.register('model:post', (_a = class Post extends denali_1.Model {
        },
        _a.comments = denali_1.hasMany('comment'),
        _a));
    container.register('model:comment', class Comment extends denali_1.Model {
    });
    container.register('orm-adapter:application', class extends denali_1.MemoryAdapter {
    });
    let Post = container.factoryFor('model:post');
    let Comment = container.factoryFor('model:comment');
    let post = yield Post.create().save();
    yield post.setComments([yield Comment.create().save()]);
    let comments = yield post.getComments();
    t.true(lodash_1.isArray(comments), 'comments is an array');
    t.is(comments.length, 1, 'has the correct number of comments');
    var _a;
}));
ava_1.default('set<RelationshipName> invokes adapter', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    t.plan(1);
    let container = t.context.container;
    container.register('model:post', (_a = class Post extends denali_1.Model {
        },
        _a.comments = denali_1.hasMany('comment'),
        _a));
    container.register('model:comment', class Comment extends denali_1.Model {
    });
    container.register('orm-adapter:application', class extends denali_1.MemoryAdapter {
        setRelated(model, relationship, descriptor, relatedModels) {
            t.pass();
            return super.setRelated(model, relationship, descriptor, relatedModels);
        }
    });
    let Post = container.factoryFor('model:post');
    let post = yield Post.create().save();
    yield post.setComments([]);
    var _a;
}));
ava_1.default('set<RelationshipName> throws for non-existent relationships', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    t.plan(1);
    let container = t.context.container;
    container.register('model:post', class Post extends denali_1.Model {
    });
    container.register('orm-adapter:application', class extends denali_1.MemoryAdapter {
    });
    let Post = container.factoryFor('model:post');
    let post = yield Post.create().save();
    t.throws(function () {
        post.setComments();
    });
}));
ava_1.default('add<RelationshipName> invokes adapter', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    t.plan(1);
    let container = t.context.container;
    container.register('model:post', (_a = class Post extends denali_1.Model {
        },
        _a.comments = denali_1.hasMany('comment'),
        _a));
    container.register('model:comment', class Comment extends denali_1.Model {
    });
    container.register('orm-adapter:application', class extends denali_1.MemoryAdapter {
        addRelated(model, relationship, descriptor, relatedModel) {
            t.pass();
            return super.setRelated(model, relationship, descriptor, relatedModel);
        }
    });
    let Post = container.factoryFor('model:post');
    let Comment = container.factoryFor('model:comment');
    let post = yield Post.create().save();
    let comment = yield Comment.create().save();
    yield post.addComment(comment);
    var _a;
}));
ava_1.default('add<RelationshipName> throws for non-existent relationships', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    t.plan(1);
    let container = t.context.container;
    container.register('model:post', class Post extends denali_1.Model {
    });
    container.register('orm-adapter:application', class extends denali_1.MemoryAdapter {
    });
    let Post = container.factoryFor('model:post');
    let post = yield Post.create();
    t.throws(function () {
        post.addComment();
    });
}));
ava_1.default('remove<RelationshipName> invokes adapter', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    t.plan(1);
    let container = t.context.container;
    container.register('model:post', (_a = class Post extends denali_1.Model {
        },
        _a.comments = denali_1.hasMany('comment'),
        _a));
    container.register('model:comment', class Comment extends denali_1.Model {
    });
    container.register('orm-adapter:application', class extends denali_1.MemoryAdapter {
        removeRelated(model, relationship, descriptor, relatedModel) {
            t.pass();
            return super.removeRelated(model, relationship, descriptor, relatedModel);
        }
    });
    let Post = container.factoryFor('model:post');
    let Comment = container.factoryFor('model:comment');
    let post = yield Post.create().save();
    let comment = yield Comment.create().save();
    yield post.addComment(comment);
    yield post.removeComment(comment);
    var _a;
}));
ava_1.default('remove<RelationshipName> throws for non-existent relationships', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    t.plan(1);
    let container = t.context.container;
    container.register('model:post', class Post extends denali_1.Model {
    });
    container.register('orm-adapter:application', class extends denali_1.MemoryAdapter {
    });
    let Post = container.factoryFor('model:post');
    let post = yield Post.create();
    t.throws(function () {
        post.removeComment();
    });
}));
ava_1.default.todo('Model.mapRelationshipDescriptors maps over relationship descriptors');
ava_1.default.todo('Model.mapAttributeDescriptors maps over attribute descriptors');
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
const lodash_1 = require("lodash");
/**
 * A mock request used to simluate an HTTP request to the application during tests. You shouldn't
 * need to instantiate these directly - instead, use an AppAcceptance test.
 *
 * @package test
 */
class MockRequest extends stream_1.Transform {
    constructor(options = {}) {
        super();
        this.socket = {
            remoteAddress: '123.45.67.89'
        };
        this._writableState.objectMode = true;
        this._readableState.objectMode = false;
        this.method = options.method || 'GET';
        this.url = options.url || '';
        this.headers = options.headers || {};
        this.method = this.method.toUpperCase();
        if (['POST', 'PUT', 'PATCH'].indexOf(this.method) > -1) {
            this.headers['Transfer-Encoding'] = 'chunked';
        }
        this.headers = lodash_1.mapValues(this.headers, lodash_1.toString);
        this.headers = lodash_1.mapKeys(this.headers, (value, key) => {
            return key.toLowerCase();
        });
        this.rawHeaders = lodash_1.flatten(lodash_1.toPairs(this.headers));
        if (['POST', 'PUT', 'PATCH'].indexOf(this.method) === -1) {
            delete this.headers['content-type'];
            this.rawHeaders = lodash_1.without(this.rawHeaders, 'content-type');
        }
    }
    _transform(chunk, encoding, next) {
        if (typeof chunk !== 'string' && !Buffer.isBuffer(chunk)) {
            chunk = JSON.stringify(chunk);
        }
        this.push(chunk);
        next();
    }
}
exports.default = MockRequest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1yZXF1ZXN0LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zZWF3YXR0cy9zcmMvZ2l0aHViLmNvbS9zZWF3YXR0cy9kZW5hbGkvIiwic291cmNlcyI6WyJsaWIvdGVzdC9tb2NrLXJlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBbUM7QUFDbkMsbUNBQWlGO0FBRWpGOzs7OztHQUtHO0FBQ0gsaUJBQWlDLFNBQVEsa0JBQVM7SUFrQmhELFlBQVksVUFBa0YsRUFBRTtRQUM5RixLQUFLLEVBQUUsQ0FBQztRQUxWLFdBQU0sR0FBRztZQUNQLGFBQWEsRUFBRSxjQUFjO1NBQzlCLENBQUM7UUFJQSxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBRXZDLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUM7UUFDdEMsSUFBSSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO1FBRXJDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUV4QyxFQUFFLENBQUMsQ0FBQyxDQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLFNBQVMsQ0FBQztRQUNoRCxDQUFDO1FBRUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxrQkFBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsaUJBQVEsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxPQUFPLEdBQUcsZ0JBQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUc7WUFDOUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxVQUFVLEdBQUcsZ0JBQU8sQ0FBQyxnQkFBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRWpELEVBQUUsQ0FBQyxDQUFDLENBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDcEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxnQkFBTyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDN0QsQ0FBQztJQUNILENBQUM7SUFFRCxVQUFVLENBQUMsS0FBMkIsRUFBRSxRQUFnQixFQUFFLElBQWdCO1FBQ3hFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pELEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hDLENBQUM7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pCLElBQUksRUFBRSxDQUFDO0lBQ1QsQ0FBQztDQUdGO0FBdERELDhCQXNEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgeyB3aXRob3V0LCB0b1N0cmluZywgbWFwVmFsdWVzLCBtYXBLZXlzLCBmbGF0dGVuLCB0b1BhaXJzIH0gZnJvbSAnbG9kYXNoJztcblxuLyoqXG4gKiBBIG1vY2sgcmVxdWVzdCB1c2VkIHRvIHNpbWx1YXRlIGFuIEhUVFAgcmVxdWVzdCB0byB0aGUgYXBwbGljYXRpb24gZHVyaW5nIHRlc3RzLiBZb3Ugc2hvdWxkbid0XG4gKiBuZWVkIHRvIGluc3RhbnRpYXRlIHRoZXNlIGRpcmVjdGx5IC0gaW5zdGVhZCwgdXNlIGFuIEFwcEFjY2VwdGFuY2UgdGVzdC5cbiAqXG4gKiBAcGFja2FnZSB0ZXN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vY2tSZXF1ZXN0IGV4dGVuZHMgVHJhbnNmb3JtIHtcblxuICAvLyBNb2NrIGludGVybmFscyBvZiBJbmNvbWluZ01lc3NhZ2VcbiAgLy8gdHNsaW50OmRpc2FibGU6Y29tcGxldGVkLWRvY3MgbWVtYmVyLWFjY2Vzc1xuICBtZXRob2Q6IHN0cmluZztcbiAgdXJsOiBzdHJpbmc7XG4gIGhlYWRlcnM6IHtcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmdcbiAgfTtcbiAgcmF3SGVhZGVyczogc3RyaW5nW107XG5cbiAgX3dyaXRhYmxlU3RhdGU6IGFueTtcbiAgX3JlYWRhYmxlU3RhdGU6IGFueTtcblxuICBzb2NrZXQgPSB7XG4gICAgcmVtb3RlQWRkcmVzczogJzEyMy40NS42Ny44OSdcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiB7IG1ldGhvZD86IHN0cmluZywgdXJsPzogc3RyaW5nLCBoZWFkZXJzPzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSB9ID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUub2JqZWN0TW9kZSA9IHRydWU7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5vYmplY3RNb2RlID0gZmFsc2U7XG5cbiAgICB0aGlzLm1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8ICdHRVQnO1xuICAgIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJyc7XG4gICAgdGhpcy5oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzIHx8IHt9O1xuXG4gICAgdGhpcy5tZXRob2QgPSB0aGlzLm1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuXG4gICAgaWYgKFsgJ1BPU1QnLCAnUFVUJywgJ1BBVENIJyBdLmluZGV4T2YodGhpcy5tZXRob2QpID4gLTEpIHtcbiAgICAgIHRoaXMuaGVhZGVyc1snVHJhbnNmZXItRW5jb2RpbmcnXSA9ICdjaHVua2VkJztcbiAgICB9XG5cbiAgICB0aGlzLmhlYWRlcnMgPSBtYXBWYWx1ZXModGhpcy5oZWFkZXJzLCB0b1N0cmluZyk7XG4gICAgdGhpcy5oZWFkZXJzID0gbWFwS2V5cyh0aGlzLmhlYWRlcnMsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICByZXR1cm4ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG4gICAgdGhpcy5yYXdIZWFkZXJzID0gZmxhdHRlbih0b1BhaXJzKHRoaXMuaGVhZGVycykpO1xuXG4gICAgaWYgKFsgJ1BPU1QnLCAnUFVUJywgJ1BBVENIJyBdLmluZGV4T2YodGhpcy5tZXRob2QpID09PSAtMSkge1xuICAgICAgZGVsZXRlIHRoaXMuaGVhZGVyc1snY29udGVudC10eXBlJ107XG4gICAgICB0aGlzLnJhd0hlYWRlcnMgPSB3aXRob3V0KHRoaXMucmF3SGVhZGVycywgJ2NvbnRlbnQtdHlwZScpO1xuICAgIH1cbiAgfVxuXG4gIF90cmFuc2Zvcm0oY2h1bms6IHN0cmluZyB8IEJ1ZmZlciB8IHt9LCBlbmNvZGluZzogc3RyaW5nLCBuZXh0OiAoKSA9PiB2b2lkKSB7XG4gICAgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIHtcbiAgICAgIGNodW5rID0gSlNPTi5zdHJpbmdpZnkoY2h1bmspO1xuICAgIH1cbiAgICB0aGlzLnB1c2goY2h1bmspO1xuICAgIG5leHQoKTtcbiAgfVxuICAvLyB0c2xpbnQ6ZW5hYmxlOmNvbXBsZXRlZC1kb2NzXG5cbn1cbiJdfQ==
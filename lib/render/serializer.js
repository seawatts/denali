"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const view_1 = require("./view");
const errors_1 = require("../runtime/errors");
const result_1 = require("../utils/result");
/**
 * Serializers allow you to customize what data is returned in the response and apply simple
 * transformations to it. They allow you to decouple what data is sent from how that data is
 * structured / rendered.
 *
 * @package data
 */
class Serializer extends view_1.default {
    constructor() {
        super(...arguments);
        this.contentType = 'application/json';
    }
    /**
     * Convenience method to encapsulate standard attribute whitelist behavior - render options
     * take precedence, then allow this.attributes to be a function or straight definition
     */
    attributesToSerialize(action, options) {
        return options.attributes || result_1.default(this.attributes, action);
    }
    /**
     * Convenience method to encapsulate standard relationship whitelist behavior - render options
     * take precedence, then allow this.relationships to be a function or straight definition
     */
    relationshipsToSerialize(action, options) {
        return options.relationships || result_1.default(this.relationships, action);
    }
    render(action, response, body, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            response.setHeader('Content-type', this.contentType);
            if (body instanceof errors_1.default.HttpError) {
                response.statusCode = body.status;
            }
            body = yield this.serialize(body, action, options);
            let isProduction = this.container.lookup('config:environment').environment === 'production';
            response.write(JSON.stringify(body, null, isProduction ? 0 : 2) || '');
            response.end();
        });
    }
}
exports.default = Serializer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc2Vhd2F0dHMvc3JjL2dpdGh1Yi5jb20vc2Vhd2F0dHMvZGVuYWxpLyIsInNvdXJjZXMiOlsibGliL3JlbmRlci9zZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlDQUEwQjtBQUcxQiw4Q0FBdUM7QUFDdkMsNENBQXFDO0FBWXJDOzs7Ozs7R0FNRztBQUNILGdCQUF5QyxTQUFRLGNBQUk7SUFBckQ7O1FBRVksZ0JBQVcsR0FBRyxrQkFBa0IsQ0FBQztJQXNEN0MsQ0FBQztJQTlDQzs7O09BR0c7SUFDTyxxQkFBcUIsQ0FBQyxNQUFjLEVBQUUsT0FBc0I7UUFDcEUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUksZ0JBQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFtQkQ7OztPQUdHO0lBQ08sd0JBQXdCLENBQUMsTUFBYyxFQUFFLE9BQXNCO1FBQ3ZFLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxJQUFJLGdCQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUssTUFBTSxDQUFDLE1BQWMsRUFBRSxRQUF3QixFQUFFLElBQVMsRUFBRSxPQUFzQjs7WUFDdEYsUUFBUSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3JELEVBQUUsQ0FBQyxDQUFDLElBQUksWUFBWSxnQkFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUNwQyxDQUFDO1lBQ0QsSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ25ELElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUMsV0FBVyxLQUFLLFlBQVksQ0FBQztZQUM1RixRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFHLElBQUksRUFBRSxZQUFZLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ3hFLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNqQixDQUFDO0tBQUE7Q0FJRjtBQXhERCw2QkF3REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmlldyBmcm9tICcuL3ZpZXcnO1xuaW1wb3J0IHsgU2VydmVyUmVzcG9uc2UgfSBmcm9tICdodHRwJztcbmltcG9ydCBBY3Rpb24sIHsgUmVuZGVyT3B0aW9ucyB9IGZyb20gJy4uL3J1bnRpbWUvYWN0aW9uJztcbmltcG9ydCBFcnJvcnMgZnJvbSAnLi4vcnVudGltZS9lcnJvcnMnO1xuaW1wb3J0IHJlc3VsdCBmcm9tICcuLi91dGlscy9yZXN1bHQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlbGF0aW9uc2hpcENvbmZpZyB7XG4gIHN0cmF0ZWd5PzogJ2VtYmVkJyB8ICdpZCcgfCBzdHJpbmc7XG4gIGtleT86IHN0cmluZztcbiAgc2VyaWFsaXplcj86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZWxhdGlvbnNoaXBDb25maWdzIHtcbiAgW3JlbGF0aW9uc2hpcE5hbWU6IHN0cmluZ106IFJlbGF0aW9uc2hpcENvbmZpZztcbn1cblxuLyoqXG4gKiBTZXJpYWxpemVycyBhbGxvdyB5b3UgdG8gY3VzdG9taXplIHdoYXQgZGF0YSBpcyByZXR1cm5lZCBpbiB0aGUgcmVzcG9uc2UgYW5kIGFwcGx5IHNpbXBsZVxuICogdHJhbnNmb3JtYXRpb25zIHRvIGl0LiBUaGV5IGFsbG93IHlvdSB0byBkZWNvdXBsZSB3aGF0IGRhdGEgaXMgc2VudCBmcm9tIGhvdyB0aGF0IGRhdGEgaXNcbiAqIHN0cnVjdHVyZWQgLyByZW5kZXJlZC5cbiAqXG4gKiBAcGFja2FnZSBkYXRhXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIFNlcmlhbGl6ZXIgZXh0ZW5kcyBWaWV3IHtcblxuICBwcm90ZWN0ZWQgY29udGVudFR5cGUgPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIGF0dHJpYnV0ZSBuYW1lcyB0aGF0IHNob3VsZCBiZSBzZXJpYWxpemVkLiBBdHRyaWJ1dGVzIG5vdCBpbmNsdWRlZCBpbiB0aGlzIGxpc3RcbiAgICogd2lsbCBiZSBvbWl0dGVkIGZyb20gdGhlIGZpbmFsIHJlbmRlcmVkIHBheWxvYWQuXG4gICAqL1xuICBwcm90ZWN0ZWQgYWJzdHJhY3QgYXR0cmlidXRlczogKCguLi5hcmdzOiBhbnlbXSkgPT4gc3RyaW5nW10pIHwgc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIENvbnZlbmllbmNlIG1ldGhvZCB0byBlbmNhcHN1bGF0ZSBzdGFuZGFyZCBhdHRyaWJ1dGUgd2hpdGVsaXN0IGJlaGF2aW9yIC0gcmVuZGVyIG9wdGlvbnNcbiAgICogdGFrZSBwcmVjZWRlbmNlLCB0aGVuIGFsbG93IHRoaXMuYXR0cmlidXRlcyB0byBiZSBhIGZ1bmN0aW9uIG9yIHN0cmFpZ2h0IGRlZmluaXRpb25cbiAgICovXG4gIHByb3RlY3RlZCBhdHRyaWJ1dGVzVG9TZXJpYWxpemUoYWN0aW9uOiBBY3Rpb24sIG9wdGlvbnM6IFJlbmRlck9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHJlc3VsdCh0aGlzLmF0dHJpYnV0ZXMsIGFjdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogQW4gb2JqZWN0IHdpdGggY29uZmlndXJhdGlvbiBvbiBob3cgdG8gc2VyaWFsaXplIHJlbGF0aW9uc2hpcHMuIFJlbGF0aW9uc2hpcHMgdGhhdCBoYXZlIG5vXG4gICAqIGNvbmZpZ3VyYXRpb24gcHJlc2VudCBhcmUgb21pdHRlZCBmcm9tIHRoZSBmaW5hbCByZW5kZXJlZCBwYXlsb2FkLlxuICAgKlxuICAgKiBPdXQgb2YgdGhlIGJveCwgb25lIG9wdGlvbiBpcyBzdXBwb3J0ZWQ6XG4gICAqXG4gICAqICoqc3RyYXRlZ3kqKlxuICAgKlxuICAgKiBJdCBoYXMgb25lIG9mIHR3byBwb3NzaWJsZSB2YWx1ZXM6XG4gICAqXG4gICAqICAgKiBgZW1iZWRgOiBlbWJlZCBhbGwgcmVsYXRlZCByZWNvcmRzIGluIHRoZSByZXNwb25zZSBwYXlsb2FkXG4gICAqICAgKiBgaWRgOiBpbmNsdWRlIG9ubHkgdGhlIGlkIG9mIHRoZSByZWxhdGVkIHJlY29yZChzKVxuICAgKlxuICAgKiBXaGF0IHRoZSBlbWJlZGRlZCByZWNvcmRzIG9yIGlkcyBsb29rIGxpa2UgaXMgdXAgdG8gZWFjaCBzZXJpYWxpemVyIHRvIGRldGVybWluZS5cbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCByZWxhdGlvbnNoaXBzOiAoKC4uLmFyZ3M6IGFueVtdKSA9PiBSZWxhdGlvbnNoaXBDb25maWdzKSB8IFJlbGF0aW9uc2hpcENvbmZpZ3M7XG5cbiAgLyoqXG4gICAqIENvbnZlbmllbmNlIG1ldGhvZCB0byBlbmNhcHN1bGF0ZSBzdGFuZGFyZCByZWxhdGlvbnNoaXAgd2hpdGVsaXN0IGJlaGF2aW9yIC0gcmVuZGVyIG9wdGlvbnNcbiAgICogdGFrZSBwcmVjZWRlbmNlLCB0aGVuIGFsbG93IHRoaXMucmVsYXRpb25zaGlwcyB0byBiZSBhIGZ1bmN0aW9uIG9yIHN0cmFpZ2h0IGRlZmluaXRpb25cbiAgICovXG4gIHByb3RlY3RlZCByZWxhdGlvbnNoaXBzVG9TZXJpYWxpemUoYWN0aW9uOiBBY3Rpb24sIG9wdGlvbnM6IFJlbmRlck9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5yZWxhdGlvbnNoaXBzIHx8IHJlc3VsdCh0aGlzLnJlbGF0aW9uc2hpcHMsIGFjdGlvbik7XG4gIH1cblxuICBhc3luYyByZW5kZXIoYWN0aW9uOiBBY3Rpb24sIHJlc3BvbnNlOiBTZXJ2ZXJSZXNwb25zZSwgYm9keTogYW55LCBvcHRpb25zOiBSZW5kZXJPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmVzcG9uc2Uuc2V0SGVhZGVyKCdDb250ZW50LXR5cGUnLCB0aGlzLmNvbnRlbnRUeXBlKTtcbiAgICBpZiAoYm9keSBpbnN0YW5jZW9mIEVycm9ycy5IdHRwRXJyb3IpIHtcbiAgICAgIHJlc3BvbnNlLnN0YXR1c0NvZGUgPSBib2R5LnN0YXR1cztcbiAgICB9XG4gICAgYm9keSA9IGF3YWl0IHRoaXMuc2VyaWFsaXplKGJvZHksIGFjdGlvbiwgb3B0aW9ucyk7XG4gICAgbGV0IGlzUHJvZHVjdGlvbiA9IHRoaXMuY29udGFpbmVyLmxvb2t1cCgnY29uZmlnOmVudmlyb25tZW50JykuZW52aXJvbm1lbnQgPT09ICdwcm9kdWN0aW9uJztcbiAgICByZXNwb25zZS53cml0ZShKU09OLnN0cmluZ2lmeShib2R5ICwgbnVsbCwgaXNQcm9kdWN0aW9uID8gMCA6IDIpIHx8ICcnKTtcbiAgICByZXNwb25zZS5lbmQoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBhc3luYyBzZXJpYWxpemUoYWN0aW9uOiBBY3Rpb24sIGJvZHk6IGFueSwgb3B0aW9uczogUmVuZGVyT3B0aW9ucyk6IFByb21pc2U8YW55PjtcblxufVxuIl19